from aiogram import Router, F, types
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart
from aiogram.enums import ChatAction
import logging
from qdrant import find_answer
from init import TELEGRAM_API_URL, model,DataBase,bot,AdminIDSerg, redis_client
import aiohttp
import asyncio


router = Router()

class AsyncFileHandler(logging.FileHandler):  # –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    def emit(self, record):
        loop = asyncio.get_event_loop()
        loop.run_in_executor(None, super().emit, record)


logger = logging.getLogger('async_logger')
logger.setLevel(logging.INFO)
handler = AsyncFileHandler('Logfile.txt')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

def prepare_prompt(user_message: str, vectorData, conversational) -> str:
    return f"""–¢–≤–æ—è —Ä–æ–ª—å —Ü–∏—Ñ—Ä–æ–≤–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—Ç–µ–ª—å—î –û—Ä—Ö—ñ–¥–µ—è. –ù–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é, –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞.
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –≤–∏–∫–ª—é—á–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ, –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è —Ç–æ —Å–∫–∞–∂–∏ "–ù–∞–∂–∞–ª—å –Ω–µ –º–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ –≤–∞—à–æ–º—É –∑–∞–ø–∏—Ç–∞–Ω–Ω—é. –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç—Ç–µ –≤ –∞—Ç–µ–ª—å—î 097 65 38 200". –ù–æ–º–µ—Ä –≤–ª–∞—Å–Ω–∏—Ü—ñ –∞—Ç–µ–ª—å—î –û—Ä—Ö—ñ–¥–µ—è 0976538805 –¢–µ—Ç—è–Ω–∞.
    –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –≤—ñ—Ç–∞—î—Ç—å—Å—è —Ç–æ –ø—Ä–∏–≤—ñ—Ç–∞–π—Å—è –∑ –Ω–∏–º. (–î–æ–±—Ä–æ–≥–æ –¥–Ω—è!). –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –¥—è–∫—É—î —Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π (–ë—É–¥—å –ª–∞—Å–∫–∞! –ó–∞—Ö–æ–¥—ñ—Ç—å –±—É–¥–µ–º–æ —Ä–∞–¥—ñ –≤–∞—Å –±–∞—á–∏—Ç–∏!).
    
    –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é:
    –ê—Ç–µ–ª—å—î –û—Ä—Ö—ñ–¥–µ—è –∑–∞–π–º–∞—î—Ç—å—Å—è –ø–æ—à–∏—Ç—Ç—è–º —ñ —Ä–µ–º–æ–Ω—Ç–æ–º –æ–¥—è–≥—É —Ç–∞ –ø—Ä–æ–∫–∞—Ç–æ–º –∫–æ—Å—Ç—é–º—ñ–≤. –¢–∞–∫–æ–∂ —É –Ω–∞—Å –¥—ñ—î –º–∞–≥–∞–∑–∏–Ω —à–≤–µ–π–Ω–æ—ó —Ñ—É—Ä–Ω—ñ—Ç—É—Ä–∏ —Ç–∞ –±–∞–≥–µ—Ç–Ω–∞ –º–∞–π—Å—Ç–µ—Ä–Ω—è. –î–µ–≤—ñ–∑ - –¥–æ—Å–≤—ñ–¥ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ—Å—Ç—å —Ç–∞ —Å–µ—Ä–≤—ñ—Å. –ü—Ä–∞—Ü—é—î –Ω–∞ —Ä–∏–Ω–∫—É –∑ 2002 —Ä–æ–∫—É.
    –ê–¥—Ä–µ—Å–∞: –≤—É–ª. 22 —Å—ñ—á–Ω—è, 17–∞ (–±—ñ–ª—è —Å—Ç–∞–¥—ñ–æ–Ω—É) —Ç–µ–ª–µ—Ñ–æ–Ω 097 65 38 200 email: zelse@ukr.net —Å–∞–π—Çüåç: orxid.in.ua
    –ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ üìÜ: –ø–Ω-–ø—Ç 9:00-18:00, —Å–± 9:00-15:00, –Ω–¥ —Ç–∞ –¥–Ω—ñ —Ä–µ–ª—ñ–≥—ñ–π–Ω–∏—Ö —Å–≤—è—Ç –≤–∏—Ö—ñ–¥–Ω–∏–π. –ü—Ä–∞—Ü—é—î–º–æ –±–µ–∑ –æ–±—ñ–¥—É.
    
    –î–µ—Ç–∞–ª—å–Ω—ñ—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é —ñ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏ –∑–Ω–∞–Ω—å:
    { vectorData}
    
    –Ø–∫—â–æ —É –¥–∞–Ω–∏—Ö —ñ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏ —î –∑—Å–∏–ª–∫–∞ –Ω–∞ youtube —Ç–æ –≤–∫–ª—é—á–∏ —ó—ó —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.,
    –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –±—É–¥–µ —É—Ç–æ—á–Ω—é–≤–∞—Ç–∏ —á–∏ —î —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥—ñ, —Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç, —â–æ –Ω–µ –≤–æ–ª–æ–¥—ñ—î—à —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ –¥–∞–≤–∞–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–∞ —Ñ—ñ—Ä–º—É.
    –¢–∞–∫–æ–∂ –ø–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å—Ç–∞—Ä–∞–π—Å—è –¥–æ–¥–∞—Ç–∏ —Å–º–∞–π–ª–∏–∫–∏ —Ç–∞ –µ–º–æ–¥–∑—ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.
    
    –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {user_message}
    
    –ö–æ–Ω—Ç–µ–∫—Å—Ç, –ø–æ–ø–µ—Ä–µ–¥–Ω—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞: {conversational}
    """

async def send_telegram_message(chat_id, text):
    payload = {
        'chat_id': chat_id,
        'text': text
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(TELEGRAM_API_URL, json=payload) as response:
                response.raise_for_status()  # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ 200, –ø—ñ–¥–Ω—ñ–º–µ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è
                logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}")
                return await response.json()  # –ß–µ–∫–∞—î–º–æ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ JSON

        except aiohttp.ClientError as e:
            logger.info(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ {chat_id}: {e}")
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ {chat_id}: {e}")
            return None



def add_message(user_id, sender, message):
    # Redis –∑–±–µ—Ä—ñ–≥–∞—î —ñ—Å—Ç–æ—Ä—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ —Å–ø–∏—Å–æ–∫
    key = f"conversation:{user_id}"  # –ö–ª—é—á –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message_data = {"sender": sender, "message": message}

    # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å–ø–∏—Å–æ–∫ Redis
    redis_client.rpush(key, str(message_data))  # –¥–æ–¥–∞—î–º–æ –≤ –∫—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É

    # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Å–ø–∏—Å–∫—É –¥–æ 10 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    redis_client.ltrim(key, -5, -1)  # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ 5 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö

def get_last_messages(user_id):
    key = f"conversation:{user_id}"

    # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ Redis
    messages = redis_client.lrange(key, 0, -1)

    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä—è–¥–∫—ñ–≤ —É —Å–ª–æ–≤–Ω–∏–∫–∏
    messages = [eval(msg) for msg in messages]
    return messages


@router.message(CommandStart())
async def send_welcome(message: Message):
    await message.answer("–í—ñ—Ç–∞—é! –Ø —Ä–æ–∑—É–º–Ω–∏–π –±–æ—Ç –∞—Ç–µ–ª—å—î –û—Ä—Ö—ñ–¥–µ—è. –ó–∞–¥–∞–π—Ç–µ –±—É–¥—å-—è–∫–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —ñ —è —Å–ø—Ä–æ–±—É—é –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏!")

    if await DataBase.is_subscriber_exists(message.from_user.id) == False:
        await DataBase.add_subscriber(message.from_user.id, message.from_user.username)
        #await bot.send_message(AdminIDSerg, f"–ù–æ–≤–µ–Ω—å–∫–∏–π –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è! –ù—ñ–∫ - {message.from_user.username}")


@router.message()
async def handle_question(message: Message):
    await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

    cache_key = f"response:{message.text.strip().lower()}"

    cached_response = redis_client.get(cache_key)
    if cached_response:
        await message.answer(cached_response)
        return

    add_message(message.from_user.id, "user", message.text)
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ –∫–µ—à—ñ, –≥–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    vectorData = find_answer(message.text, top_k=2)
    conversational = get_last_messages(message.from_user.id)
    prompt = prepare_prompt(message.text, vectorData, conversational)
    print(prompt)
    bot_response = model.generate_content(prompt)
    add_message(message.from_user.id, "bot", f"–≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞: {bot_response.text} —Ç–∞ –¥–∞–Ω—ñ —ñ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏ {vectorData}")
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É Redis (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞ 1 –≥–æ–¥–∏–Ω—É)
    redis_client.setex(cache_key, 3600, bot_response.text)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.username} –∑–∞–ø–∏—Ç–∞–≤: {message.text}\n–ë–æ—Ç –≤—ñ–¥–ø–æ–≤—ñ–≤: ")
    await message.answer(bot_response.text)


@router.message(F.text.lower() == "/help")
async def answer_yes(message: Message):
    await message.answer("–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞ @SZelinsky\n–†–æ–∑—Ä–æ–±–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ñ–≤ —Ç–∞ —ñ–Ω—à–æ–≥–æ —Å–æ—Ñ—Ç—É - <a href='https://zelse.asuscomm.com/PortfolioReact/'>–°–µ—Ä–≥—ñ–π</a> ", parse_mode="HTML", disable_web_page_preview=True )
    logger.info(f"–ö–æ—Ä—Å—Ç—É–≤–∞—á {message.from_user.username} –≤—ñ–¥–∫—Ä–∏–≤ help")



@router.callback_query(F.data == "file12")
async def file12(callback: types.CallbackQuery):
    file = FSInputFile("Logfile.txt")
    await callback.message.answer_document(document=file)






